import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.File;
import java.nio.file.Files;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Scanner;

public class Main {
    static String ALGORITHM = "AES";

    public static void decryptFiles(SecretKey secretKey, File file, String rep) throws Exception {
        if (file.exists()) {
            String[] content = file.list();
            if (content != null) {
                for (String s : content) {
                    File f2 = new File(file, s);
                    if (f2.isDirectory()) {
                        decryptFiles(secretKey, f2, rep + File.separator + s);
                    } else {
                        decryptFile(ALGORITHM, f2, secretKey);
                    }
                }
            }
        }
    }

    public static void decryptFile(String algorithm, File f, SecretKey key) throws Exception {
        byte[] fileBytes = Files.readAllBytes(f.toPath());
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedFile = cipher.doFinal(fileBytes);
        Files.write(f.toPath(), decryptedFile);
    }


    public static SecretKey getKey(String algorithm, String secretKey) throws NoSuchAlgorithmException {
        byte[] decodedKey = Base64.getDecoder().decode(secretKey);
        return new SecretKeySpec(decodedKey, algorithm);
    }

    public static void main(String[] args) throws Exception {
        System.out.print("Enter the secret key: ");
        Scanner s = new Scanner(System.in);
        String secretKey = s.next();
        SecretKey key = getKey(ALGORITHM, secretKey);
        String rep = "D:/victimFile";
        File file = new File(rep);
        decryptFiles(key, file, ALGORITHM);
    }
}